////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) Autodesk, Inc. All rights reserved 
// Written by Jan Liska & Philippe Leefsma 2011 - ADN/Developer Technical Services
//
// This software is provided as is, without any warranty that it will work. You choose to use this tool at your own risk.
// Neither Autodesk nor the authors can be taken as responsible for any damage this tool can cause to 
// your data. Please always make a back up of your data prior to use this tool.
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.Linq;
using System.Text;
using Autodesk.iLogic.Interfaces;
using Inventor;
using LinkParameters.Utilities;

namespace LinkParameters
{
    static class ParameterMapping
    {
        public static void UpdateMappings(
            Document document,
            ComponentOccurrence targetOcc,
            List<ParameterMappingInfo> erasedMappings,
            List<ParameterMappingInfo> newMappings,
            string ruleName,
            bool fireDepRules,
            bool dontRunAuto,
            bool updateWhenDone)
        {
            try
            {
                IiLogicAutomation ruleApi = iLogicUtilities.GetiLogicAutomation();

                iLogicRule rule = ruleApi.GetRule(document, ruleName);

                if (rule == null)
                {
                    rule = ruleApi.AddRule(document, ruleName, string.Empty);
                }

                //First we will remove erased mappings
                foreach (ParameterMappingInfo mapping in erasedMappings)
                {
                    string mappingStr = CreateMappingString(mapping);

                    if (rule.Text.Contains(mappingStr))
                    {
                        rule.Text = rule.Text.Replace(mappingStr, string.Empty);
                    }
                }

                //Clean up rule, we will remove all empty sections here
                if (erasedMappings.Count > 0)
                {
                    RemoveEmptySections(rule);
                }

                //Then add new mappings
                List<string> newMappingsStr = new List<string>();

                foreach (ParameterMappingInfo mapping in newMappings)
                {
                    string mappingStr = CreateMappingString(mapping);

                    if (!rule.Text.Contains(mappingStr))
                    {
                        newMappingsStr.Add(mappingStr);
                    }
                }

                string updateStr = "iLogicVb.UpdateWhenDone = " + (updateWhenDone ? "True" : "False");

                if (!rule.Text.Contains(updateStr))
                {
                    newMappingsStr.Add(updateStr);
                }

                if (newMappingsStr.Count > 0)
                {
                    string startTag = "\n'<LinkParameters:Section:Start> This code section was generated by LinkParameters Add-In (Do NOT modify)\n";
                    
                    string endTag = "'<LinkParameters:Section:End>" + " [Date: " + System.DateTime.Now.ToString() + "]\n";

                    rule.Text += startTag;

                    foreach (string line in newMappingsStr)
                    {
                        rule.Text += line + "\n";
                    }

                    rule.Text += endTag;
                }

                rule.FireDependentImmediately = fireDepRules;
                rule.AutomaticOnParamChange = !dontRunAuto;

                if (!dontRunAuto)
                    ruleApi.RunRuleDirect(rule);
            }
            catch
            {
                
            }
        }

        private static string CreateMappingString(ParameterMappingInfo mapping)
        {
            StringBuilder newMapping = new StringBuilder();

            string format = (mapping.SourceComponentName == string.Empty ?
                "Parameter(\"{0}\", \"{1}\") = Parameter(\"{3}\")" :
                "Parameter(\"{0}\", \"{1}\") = Parameter(\"{2}\", \"{3}\")");

            newMapping.AppendFormat(format,
                mapping.TargetComponentName,
                mapping.TargetParameterName,
                mapping.SourceComponentName,
                mapping.SourceParameterName);

            return newMapping.ToString();
        }

        private static void RemoveEmptySections(iLogicRule rule)
        {
            List<string> lines = rule.Text.Split('\n').ToList<string>();

            bool bIsLinkParametersSection = false;

            int nbNonEmptyLines = 0;

            int indexStart = 0;
            int index = -1;

            List<int> indicesToRemove = new List<int>();

            foreach (string line in lines)
            {
                ++index;

                //Not in a section, look for section start
                if (!bIsLinkParametersSection)
                {
                    if (line.Contains("<LinkParameters:Section:Start>"))
                    {
                        bIsLinkParametersSection = true;
                        nbNonEmptyLines = 0;
                        indexStart = index;
                    }

                    continue;
                }

                //we are in a section, look for section end
                if (line.Contains("<LinkParameters:Section:End>"))
                {
                    bIsLinkParametersSection = false;

                    if (nbNonEmptyLines == 0)
                    {
                        for (int removedIndex = indexStart; removedIndex <= index; ++removedIndex)
                        {
                            indicesToRemove.Add(removedIndex);
                        }
                    }

                    continue;
                }

                if (line != "\r")
                {
                    ++nbNonEmptyLines;
                }
            }

            indicesToRemove.Reverse(0, indicesToRemove.Count);

            foreach (int idx in indicesToRemove)
            {
                lines.RemoveAt(idx);
            }

            string text = string.Empty;

            foreach (string line in lines)
            {
                text += line + "\n";
            }

            rule.Text = text;
        }
    }
}

